#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int n;
bool cmp(int a,int b){
	return a>b;
}
int findRoot(vector<int>& root,int x){
	if(root[x]==-1) return x;
	return findRoot(root,root[x]);   
}
int main(){
	cin>>n;
	vector<vector<int>> hobbies(1001);
	vector<int> root(n+1,-1);
	vector<int> nums(n+1,1);
	for(int i=1;i<=n;i++){
		int k;char c;
		cin>>k>>c;
		while(k--){
			int t;
			cin>>t;
			hobbies[t].push_back(i);
		}
	}
	for(int i=1;i<=1000;i++){
		if(hobbies[i].size()==0) continue;
		int p1=hobbies[i][0];
		int r1=findRoot(root,p1);
		for(int j=1;j<hobbies[i].size();j++){
			int p2=hobbies[i][j];
			int r2=findRoot(root,p2);
			if(r1!=r2){
				nums[r1]+=nums[r2];
				root[r2]=r1;
			}
		}
	}
	vector<int> ans;
    for(int i=1;i<=n;++i)
    {
        if(root[i]==-1){
            ans.push_back(nums[i]);
        }
    }
    sort(ans.begin(),ans.end(),cmp);
    cout<<ans.size()<<endl;
    for(int i=0;i<ans.size();++i)
    {
        cout<<ans[i];
        if(i==ans.size()-1)cout<<endl;
        else cout<<" ";
    }
    return 0;
}
